{"mappings":"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","sources":["deps/glsl.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"clike\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      keywords = parserConfig.keywords || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (builtin.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements &&\n               (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n                (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if (ctx.align && (!dontAlignCalls || ctx.type != \")\")) return ctx.column + (closing ? 0 : 1);\n      else if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var cKeywords = \"auto if break int case long char register continue return default short do sizeof \" +\n    \"double static else struct entry switch extern typedef float union for unsigned \" +\n    \"goto while enum void const signed volatile\";\n\n  function cppHook(stream, state) {\n    if (!state.startOfLine) return false;\n    for (;;) {\n      if (stream.skipTo(\"\\\\\")) {\n        stream.next();\n        if (stream.eol()) {\n          state.tokenize = cppHook;\n          break;\n        }\n      } else {\n        stream.skipToEnd();\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"meta\";\n  }\n\n  function cpp11StringHook(stream, state) {\n    stream.backUp(1);\n    // Raw strings.\n    if (stream.match(/(R|u8R|uR|UR|LR)/)) {\n      var match = stream.match(/\"([^\\s\\\\()]{0,16})\\(/);\n      if (!match) {\n        return false;\n      }\n      state.cpp11RawStringDelim = match[1];\n      state.tokenize = tokenRawString;\n      return tokenRawString(stream, state);\n    }\n    // Unicode strings/chars.\n    if (stream.match(/(u8|u|U|L)/)) {\n      if (stream.match(/[\"']/, /* eat */ false)) {\n        return \"string\";\n      }\n      return false;\n    }\n    // Ignore this hook.\n    stream.next();\n    return false;\n  }\n\n  // C#-style strings where \"\" escapes a quote.\n  function tokenAtString(stream, state) {\n    var next;\n    while ((next = stream.next()) != null) {\n      if (next == '\"' && !stream.eat('\"')) {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"string\";\n  }\n\n  // C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n  // <delim> can be a string up to 16 characters long.\n  function tokenRawString(stream, state) {\n    // Escape characters that have special regex meanings.\n    var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n    var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n    if (match)\n      state.tokenize = null;\n    else\n      stream.skipToEnd();\n    return \"string\";\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.atoms);\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"x-shader/x-vertex\", \"x-shader/x-fragment\"], {\n    name: \"clike\",\n    keywords: words(\"float int bool void \" +\n                    \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" +\n                    \"mat2 mat3 mat4 \" +\n                    \"sampler2D sampler3D samplerCube \" +\n                    \"const attribute uniform varying \" +\n                    \"break continue discard return \" +\n                    \"for while do if else struct \" +\n                    \"in out inout\"),\n    blockKeywords: words(\"for while do if else struct\"),\n    builtin: words(\"radians degrees sin cos tan asin acos atan \" +\n                    \"pow exp log exp2 sqrt inversesqrt \" +\n                    \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" +\n                    \"length distance dot cross normalize faceforward \" +\n                    \"reflect refract matrixCompMult \" +\n                    \"lessThan lessThanEqual greaterThan greaterThanEqual \" +\n                    \"equal notEqual any all not \" +\n                    \"texture \" +\n                    \"sdCircle sdBox sdEqTriangle sdTriangle \"+\n                    \"sdSegment sdSphere smin smax hash hash2 hash3 \"+\n                    \"vnoise fbm sdfNormal colorize chooseColor raymarch \" +\n                    \"calcShadow orbitMouseCam rayDir mainLight \"+\n                    \"backLight min2 vignette gammaCorrect calcAO rotate \"),\n    atoms: words(\"true false \"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n});\n"],"names":["CodeMirror1","words","str","obj","split","i","length","cppHook","stream","state","startOfLine","skipTo","skipToEnd","tokenize","next","eol","def","mimes","mode","add","prop","hasOwnProperty","push","keywords","builtin","atoms","helperType","registerHelper","defineMIME","defineMode","config","parserConfig","curPunc","indentUnit","statementIndentUnit","dontAlignCalls","blockKeywords","hooks","multiLineStrings","indentStatements","isOperatorChar","tokenBase","ch","result","tokenString","test","eatWhile","eat","tokenComment","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","token","ctx","sol","indentation","eatSpace","style","textAfter","Pass","firstChar","charAt","closing","electricChars","blockCommentStart","blockCommentEnd","lineComment","fold","name","modeProps","mod","CodeMirror"],"version":3,"file":"index.df5c1900.js.map"}